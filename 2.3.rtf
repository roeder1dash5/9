{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red255\green255\blue255;\red196\green26\blue22;
\red0\green0\blue0;\red155\green35\blue147;\red28\green70\blue74;\red57\green0\blue160;\red15\green104\blue160;
\red11\green79\blue121;\red108\green54\blue169;\red50\green109\blue116;\red93\green108\blue121;\red28\green0\blue207;
}
{\*\expandedcolortbl;;\csgenericrgb\c39147\c22031\c12446;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c10981\c27276\c28869;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c5882\c40784\c62745;
\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c42190\c21278\c66379;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c11000\c0\c81000;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww19920\viewh15540\viewkind0
\deftab593
\pard\tx593\pardeftab593\partightenfactor0

\f0\fs24 \cf2 \cb3 #import \cf4 "ViewController.h"\cf5 \
\cf2 #import \cf4 <AVFoundation/AVFoundation.h>\cf5 \
\cf2 #import \cf4 <Vision/Vision.h>\cf5 \
\cf2 #import \cf4 "CircleView.h"\cf5 \
\

\f1\b \cf6 @interface
\f0\b0 \cf5  \cf7 ViewController\cf5  () <\cf8 AVCaptureVideoDataOutputSampleBufferDelegate\cf5 >\

\f1\b \cf6 @property
\f0\b0 \cf5  (
\f1\b \cf6 nonatomic
\f0\b0 \cf5 , 
\f1\b \cf6 strong
\f0\b0 \cf5 ) \cf8 AVCaptureSession\cf5  *\cf9 session\cf5 ;\

\f1\b \cf6 @property
\f0\b0 \cf5  (
\f1\b \cf6 nonatomic
\f0\b0 \cf5 , 
\f1\b \cf6 strong
\f0\b0 \cf5 ) \cf8 AVCaptureVideoPreviewLayer\cf5  *\cf9 previewLayer\cf5 ;\

\f1\b \cf6 @property
\f0\b0 \cf5  (
\f1\b \cf6 nonatomic
\f0\b0 \cf5 , 
\f1\b \cf6 strong
\f0\b0 \cf5 ) \cf8 VNRequest\cf5  *\cf9 horizonDetectionRequest\cf5 ;\

\f1\b \cf6 @property
\f0\b0 \cf5  (
\f1\b \cf6 nonatomic
\f0\b0 \cf5 , 
\f1\b \cf6 strong
\f0\b0 \cf5 ) \cf8 UIVisualEffectView\cf5  *\cf9 floorBlurView\cf5 ;\

\f1\b \cf6 @end
\f0\b0 \cf5 \
\

\f1\b \cf6 @implementation
\f0\b0 \cf5  \cf10 ViewController\cf5 \
\
- (
\f1\b \cf6 void
\f0\b0 \cf5 )\cf9 viewDidLoad\cf5  \{\
    [
\f1\b \cf6 super
\f0\b0 \cf5  \cf11 viewDidLoad\cf5 ];\
\
    [
\f1\b \cf6 self
\f0\b0 \cf5  \cf12 setupCamera\cf5 ];    \cf13 // Start the camera\cf5 \
    [
\f1\b \cf6 self
\f0\b0 \cf5  \cf12 addCircleOverlay\cf5 ];  \cf13 // Add frosted glass circle\cf5 \
    [
\f1\b \cf6 self
\f0\b0 \cf5  \cf12 addBottomBlur\cf5 ];  \cf13 // Add bottom blur effect\cf5 \
    [
\f1\b \cf6 self
\f0\b0 \cf5  \cf12 setupVision\cf5 ]; \cf13 // Setup Vision for floor detection\cf5 \
\}\
\
- (
\f1\b \cf6 void
\f0\b0 \cf5 )\cf9 setupCamera\cf5  \{\
    
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 session\cf5  = [[\cf8 AVCaptureSession\cf5  \cf11 alloc\cf5 ] \cf11 init\cf5 ];\
    
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 session\cf5 .\cf11 sessionPreset\cf5  = \cf11 AVCaptureSessionPresetHigh\cf5 ;\
\
    \cf8 AVCaptureDevice\cf5  *camera = [\cf8 AVCaptureDevice\cf5  \cf11 defaultDeviceWithMediaType\cf5 :\cf11 AVMediaTypeVideo\cf5 ];\
    \cf8 NSError\cf5  *error = 
\f1\b \cf6 nil
\f0\b0 \cf5 ;\
    \cf8 AVCaptureDeviceInput\cf5  *input = [\cf8 AVCaptureDeviceInput\cf5  \cf11 deviceInputWithDevice\cf5 :camera \cf11 error\cf5 :&error];\
\
    
\f1\b \cf6 if
\f0\b0 \cf5  (error) \{\
        \cf11 NSLog\cf5 (\cf4 @"Error accessing camera: %@"\cf5 , error.\cf11 localizedDescription\cf5 );\
        
\f1\b \cf6 return
\f0\b0 \cf5 ;\
    \}\
\
    
\f1\b \cf6 if
\f0\b0 \cf5  ([
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 session\cf5  \cf11 canAddInput\cf5 :input]) \{\
        [
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 session\cf5  \cf11 addInput\cf5 :input];\
    \}\
\
    \cf8 AVCaptureVideoDataOutput\cf5  *output = [[\cf8 AVCaptureVideoDataOutput\cf5  \cf11 alloc\cf5 ] \cf11 init\cf5 ];\
    [output \cf11 setSampleBufferDelegate\cf5 :
\f1\b \cf6 self
\f0\b0 \cf5  \cf11 queue\cf5 :\cf11 dispatch_get_main_queue\cf5 ()];\
    [
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 session\cf5  \cf11 addOutput\cf5 :output];\
\
    
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 previewLayer\cf5  = [\cf8 AVCaptureVideoPreviewLayer\cf5  \cf11 layerWithSession\cf5 :
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 session\cf5 ];\
    
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 previewLayer\cf5 .\cf11 videoGravity\cf5  = \cf11 AVLayerVideoGravityResizeAspectFill\cf5 ;\
    
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 previewLayer\cf5 .\cf11 frame\cf5  = 
\f1\b \cf6 self
\f0\b0 \cf5 .\cf11 view\cf5 .\cf11 bounds\cf5 ;\
    [
\f1\b \cf6 self
\f0\b0 \cf5 .\cf11 view\cf5 .\cf11 layer\cf5  \cf11 addSublayer\cf5 :
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 previewLayer\cf5 ];\
\
    \cf11 dispatch_async\cf5 (\cf11 dispatch_get_global_queue\cf5 (\cf2 DISPATCH_QUEUE_PRIORITY_DEFAULT\cf5 , \cf14 0\cf5 ), ^\{\
        [
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 session\cf5  \cf11 startRunning\cf5 ];\
    \});\
\}\
\
- (
\f1\b \cf6 void
\f0\b0 \cf5 )\cf9 setupVision\cf5  \{\
    
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 horizonDetectionRequest\cf5  = [[\cf8 VNDetectHorizonRequest\cf5  \cf11 alloc\cf5 ] \cf11 initWithCompletionHandler\cf5 :^(\cf8 VNRequest\cf5  *request, \cf8 NSError\cf5  *error) \{\
        
\f1\b \cf6 if
\f0\b0 \cf5  (error) 
\f1\b \cf6 return
\f0\b0 \cf5 ;\
        \cf11 dispatch_async\cf5 (\cf11 dispatch_get_main_queue\cf5 (), ^\{\
            [
\f1\b \cf6 self
\f0\b0 \cf5  \cf12 processHorizonDetectionResults\cf5 :request.\cf11 results\cf5 ];\
        \});\
    \}];\
\}\
\
- (
\f1\b \cf6 void
\f0\b0 \cf5 )\cf9 processHorizonDetectionResults\cf5 :(\cf8 NSArray\cf5 <\cf8 VNHorizonObservation\cf5  *> *)results \{\
    
\f1\b \cf6 if
\f0\b0 \cf5  (results.\cf11 count\cf5  == \cf14 0\cf5 ) 
\f1\b \cf6 return
\f0\b0 \cf5 ;\
    \cf8 VNHorizonObservation\cf5  *horizon = results.\cf11 firstObject\cf5 ;\
\
    \cf8 CGFloat\cf5  screenHeight = 
\f1\b \cf6 self
\f0\b0 \cf5 .\cf11 view\cf5 .\cf11 bounds\cf5 .\cf11 size\cf5 .\cf11 height\cf5 ;\
    \cf8 CGFloat\cf5  screenWidth = 
\f1\b \cf6 self
\f0\b0 \cf5 .\cf11 view\cf5 .\cf11 bounds\cf5 .\cf11 size\cf5 .\cf11 width\cf5 ;\
\
    \cf13 // Use the horizon angle to estimate the floor's position\cf5 \
    \cf8 CGFloat\cf5  horizonY = screenHeight / \cf14 2\cf5  - (horizon.\cf11 angle\cf5  * screenHeight); \cf13 // Adjust floor position dynamically\cf5 \
    \cf8 CGFloat\cf5  floorY = horizonY + screenHeight * \cf14 0.2\cf5 ; \cf13 // Offset to position floor correctly\cf5 \
\
    
\f1\b \cf6 if
\f0\b0 \cf5  (floorY > screenHeight) floorY = screenHeight - \cf14 100\cf5 ; \cf13 // Prevent it from going too far\cf5 \
\
    \cf8 CGRect\cf5  floorRect = \cf11 CGRectMake\cf5 (\cf14 0\cf5 , floorY, screenWidth, screenHeight - floorY);\
\
    
\f1\b \cf6 if
\f0\b0 \cf5  (!
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 floorBlurView\cf5 ) \{\
        \cf8 UIBlurEffect\cf5  *blurEffect = [\cf8 UIBlurEffect\cf5  \cf11 effectWithStyle\cf5 :\cf11 UIBlurEffectStyleLight\cf5 ];\
        
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 floorBlurView\cf5  = [[\cf8 UIVisualEffectView\cf5  \cf11 alloc\cf5 ] \cf11 initWithEffect\cf5 :blurEffect];\
        [
\f1\b \cf6 self
\f0\b0 \cf5 .\cf11 view\cf5  \cf11 addSubview\cf5 :
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 floorBlurView\cf5 ];\
    \}\
    
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 floorBlurView\cf5 .\cf11 frame\cf5  = floorRect;\
\}\
\
- (
\f1\b \cf6 void
\f0\b0 \cf5 )\cf9 captureOutput\cf5 :(\cf8 AVCaptureOutput\cf5  *)output\
\cf9 didOutputSampleBuffer\cf5 :(\cf8 CMSampleBufferRef\cf5 )sampleBuffer\
       \cf9 fromConnection\cf5 :(\cf8 AVCaptureConnection\cf5  *)connection \{\
\
    \cf8 CVImageBufferRef\cf5  imageBuffer = \cf11 CMSampleBufferGetImageBuffer\cf5 (sampleBuffer);\
    \cf8 CIImage\cf5  *ciImage = [\cf8 CIImage\cf5  \cf11 imageWithCVPixelBuffer\cf5 :imageBuffer];\
\
    \cf8 VNImageRequestHandler\cf5  *handler = [[\cf8 VNImageRequestHandler\cf5  \cf11 alloc\cf5 ] \cf11 initWithCIImage\cf5 :ciImage \cf11 options\cf5 :\cf14 @\{\}\cf5 ];\
    \cf8 NSError\cf5  *error = 
\f1\b \cf6 nil
\f0\b0 \cf5 ;\
    [handler \cf11 performRequests\cf5 :\cf14 @[
\f1\b \cf6 self
\f0\b0 \cf5 .\cf12 horizonDetectionRequest\cf14 ]\cf5  \cf11 error\cf5 :&error];\
\
    
\f1\b \cf6 if
\f0\b0 \cf5  (error) \{\
        \cf11 NSLog\cf5 (\cf4 @"Error performing Vision request: %@"\cf5 , error.\cf11 localizedDescription\cf5 );\
    \}\
\}\
\
- (
\f1\b \cf6 void
\f0\b0 \cf5 )\cf9 addCircleOverlay\cf5  \{\
    \cf8 CGFloat\cf5  circleSize = \cf14 100.0\cf5 ;\
    \cf8 CGRect\cf5  circleFrame = \cf11 CGRectMake\cf5 (\cf14 0\cf5 , \cf14 0\cf5 , circleSize, circleSize);\
\
    \cf7 CircleView\cf5  *circleView = [[\cf7 CircleView\cf5  \cf11 alloc\cf5 ] \cf11 initWithFrame\cf5 :circleFrame];\
    circleView.\cf11 center\cf5  = 
\f1\b \cf6 self
\f0\b0 \cf5 .\cf11 view\cf5 .\cf11 center\cf5 ;\
\
    [
\f1\b \cf6 self
\f0\b0 \cf5 .\cf11 view\cf5  \cf11 addSubview\cf5 :circleView];\
\}\
\
- (
\f1\b \cf6 void
\f0\b0 \cf5 )\cf9 addBottomBlur\cf5  \{\
    \cf8 CGFloat\cf5  height = \cf14 200.0\cf5 ;\
    \cf8 CGRect\cf5  blurFrame = \cf11 CGRectMake\cf5 (\cf14 0\cf5 , 
\f1\b \cf6 self
\f0\b0 \cf5 .\cf11 view\cf5 .\cf11 frame\cf5 .\cf11 size\cf5 .\cf11 height\cf5  - height, 
\f1\b \cf6 self
\f0\b0 \cf5 .\cf11 view\cf5 .\cf11 frame\cf5 .\cf11 size\cf5 .\cf11 width\cf5 , height);\
\
    \cf8 UIBlurEffect\cf5  *blurEffect = [\cf8 UIBlurEffect\cf5  \cf11 effectWithStyle\cf5 :\cf11 UIBlurEffectStyleLight\cf5 ];\
    \cf8 UIVisualEffectView\cf5  *blurView = [[\cf8 UIVisualEffectView\cf5  \cf11 alloc\cf5 ] \cf11 initWithEffect\cf5 :blurEffect];\
    blurView.\cf11 frame\cf5  = blurFrame;\
\
    \cf8 CAGradientLayer\cf5  *gradientMask = [\cf8 CAGradientLayer\cf5  \cf11 layer\cf5 ];\
    gradientMask.\cf11 frame\cf5  = blurView.\cf11 bounds\cf5 ;\
    gradientMask.\cf11 colors\cf5  = \cf14 @[\cf5 \
        (
\f1\b \cf6 id
\f0\b0 \cf5 )[\cf8 UIColor\cf5  \cf11 clearColor\cf5 ].\cf11 CGColor\cf5 ,\
        (
\f1\b \cf6 id
\f0\b0 \cf5 )[\cf8 UIColor\cf5  \cf11 colorWithWhite\cf5 :\cf14 1.0\cf5  \cf11 alpha\cf5 :\cf14 0.9\cf5 ].\cf11 CGColor\cf5 ,\
        (
\f1\b \cf6 id
\f0\b0 \cf5 )[\cf8 UIColor\cf5  \cf11 whiteColor\cf5 ].\cf11 CGColor\cf5 \
    \cf14 ]\cf5 ;\
    gradientMask.\cf11 locations\cf5  = \cf14 @[@0.0\cf5 , \cf14 @0.5\cf5 , \cf14 @1.0]\cf5 ;\
    gradientMask.\cf11 startPoint\cf5  = \cf11 CGPointMake\cf5 (\cf14 1\cf5 , \cf14 0\cf5 );\
    gradientMask.\cf11 endPoint\cf5  = \cf11 CGPointMake\cf5 (\cf14 1\cf5 , \cf14 1.0\cf5 );\
\
    blurView.\cf11 layer\cf5 .\cf11 mask\cf5  = gradientMask;\
    [
\f1\b \cf6 self
\f0\b0 \cf5 .\cf11 view\cf5  \cf11 addSubview\cf5 :blurView];\
\}\
\

\f1\b \cf6 @end
\f0\b0 \cf5 \
}